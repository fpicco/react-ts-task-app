{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","newTask","setNewTask","tasks","setTasks","taskInput","useRef","newTaskDesc","setNewTaskDesc","tasksDesc","setTasksDesc","addTask","name","newTasks","done","addTaskDesc","description","newTasksDesc","className","onSubmit","e","preventDefault","current","focus","autoFocus","type","onChange","target","value","ref","map","t","i","style","textDecoration","onClick","toggleDoneTask","splice","removeTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA4GeA,MAjGf,WACE,MAA8BC,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAkB,IAA5C,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAAYC,iBAAyB,MAE3C,EAAsCN,mBAAiB,IAAvD,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAkCR,mBAAkB,IAApD,mBAAOS,EAAP,KAAkBC,EAAlB,KAWMC,EAAU,SAACC,GACf,IAAMC,EAAiB,CAAI,CAAED,KAAMA,EAAME,MAAM,IAAxB,mBAAoCX,IAC3DC,EAASS,IAELE,EAAc,SAACC,GACnB,IAAMC,EAAqB,CAAI,CAAED,YAAaA,IAAnB,mBAAqCP,IAChEC,EAAaO,IAcf,OACE,qBAAKC,UAAU,qBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,kBAAd,uBACA,uBAAMC,SApCG,SAACC,GAAoB,IAAD,EACvCA,EAAEC,iBACFV,EAAQV,GACRc,EAAYR,GACZL,EAAW,IACXM,EAAe,IACf,UAAAH,EAAUiB,eAAV,SAAmBC,SA8BT,UACE,uBACEL,UAAU,eACVM,WAAS,EACTC,KAAK,OACLC,SAAU,SAACN,GAAD,OAAOlB,EAAWkB,EAAEO,OAAOC,QACrCA,MAAO3B,EACP4B,IAAKxB,IAEP,uBACEa,UAAU,oBACVO,KAAK,OACLC,SAAU,SAACN,GAAD,OAAOZ,EAAeY,EAAEO,OAAOC,QACzCA,MAAOrB,EACPsB,IAAKxB,IAEP,wBAAQa,UAAU,8BAAlB,0BAKLf,EAAM2B,KAAI,SAACC,EAAUC,GAAX,OACT,sBAAKd,UAAU,sBAAf,UACE,sBAAKA,UAAU,iCAAf,UACE,oBAAIe,MAAO,CAAEC,eAAgBH,EAAEjB,KAAO,eAAiB,IAAvD,SACGiB,EAAEnB,OAEL,gCACE,wBACEM,UAAU,oBACViB,QAAS,kBAjDJ,SAACH,GACtB,IAAMnB,EAAiB,YAAOV,GACxBc,EAAqB,YAAOR,GAClCI,EAASmB,GAAGlB,MAAQD,EAASmB,GAAGlB,KAChCV,EAASS,GACTH,EAAaO,GA4CkBmB,CAAeJ,IAFhC,SAIGD,EAAEjB,KAAO,SAAM,WAElB,wBACEI,UAAU,uBACViB,QAAS,kBAhDR,SAACH,GAClB,IAAMnB,EAAiB,YAAOV,GAC9BU,EAASwB,OAAOL,EAAG,GACnB5B,EAASS,GA6CsByB,CAAWN,IAF5B,gCAQJ,qBAAKd,UAAU,OAAf,SACE,4BAAIT,EAAUuB,GAAGhB,kBArBqBgB,cC/DvCO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.da9d1050.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\ninterface ITask {\n  name: string;\n  done: boolean;\n}\ninterface IDesc {\n  description: string;\n}\n\nfunction App(): JSX.Element {\n  const [newTask, setNewTask] = useState<string>(\"\");\n  const [tasks, setTasks] = useState<ITask[]>([]);\n  const taskInput = useRef<HTMLInputElement>(null);\n\n  const [newTaskDesc, setNewTaskDesc] = useState<string>(\"\");\n  const [tasksDesc, setTasksDesc] = useState<IDesc[]>([]);\n\n  const handleSubmit = (e: FormElement) => {\n    e.preventDefault();\n    addTask(newTask);\n    addTaskDesc(newTaskDesc);\n    setNewTask(\"\");\n    setNewTaskDesc(\"\");\n    taskInput.current?.focus();\n  };\n\n  const addTask = (name: string): void => {\n    const newTasks: ITask[] = [{ name: name, done: false }, ...tasks];\n    setTasks(newTasks);\n  };\n  const addTaskDesc = (description: string): void => {\n    const newTasksDesc: IDesc[] = [{ description: description }, ...tasksDesc];\n    setTasksDesc(newTasksDesc);\n  };\n  const toggleDoneTask = (i: number): void => {\n    const newTasks: ITask[] = [...tasks];\n    const newTasksDesc: IDesc[] = [...tasksDesc];\n    newTasks[i].done = !newTasks[i].done;\n    setTasks(newTasks);\n    setTasksDesc(newTasksDesc);\n  };\n  const removeTask = (i: number): void => {\n    const newTasks: ITask[] = [...tasks];\n    newTasks.splice(i, 1);\n    setTasks(newTasks);\n  };\n  return (\n    <div className=\"container p-4 mt-5\">\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h2 className=\"p-2 text-center\">To-do app</h2>\n              <form onSubmit={handleSubmit}>\n                <input\n                  className=\"form-control\"\n                  autoFocus\n                  type=\"text\"\n                  onChange={(e) => setNewTask(e.target.value)}\n                  value={newTask}\n                  ref={taskInput}\n                />\n                <input\n                  className=\"form-control mt-2\"\n                  type=\"text\"\n                  onChange={(e) => setNewTaskDesc(e.target.value)}\n                  value={newTaskDesc}\n                  ref={taskInput}\n                />\n                <button className=\"btn btn-success col-12 mt-4\">Save</button>\n              </form>\n            </div>\n          </div>\n\n          {tasks.map((t: ITask, i: number) => (\n            <div className=\"card card-body mt-2\" key={i}>\n              <div className=\"d-flex justify-content-between\">\n                <h3 style={{ textDecoration: t.done ? \"line-through\" : \"\" }}>\n                  {t.name}\n                </h3>\n                <div>\n                  <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => toggleDoneTask(i)}\n                  >\n                    {t.done ? \"âœ“\" : \"âœ—\"}\n                  </button>\n                  <button\n                    className=\"btn btn-danger  ms-3\"\n                    onClick={() => removeTask(i)}\n                  >\n                    ðŸ—‘\n                  </button>\n                </div>\n              </div>\n              <div className=\"mt-1\">\n                <p>{tasksDesc[i].description}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}